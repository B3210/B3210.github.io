<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Docker教程</title>
      <link href="/2021/10/10/Docker-tutorial/"/>
      <url>/2021/10/10/Docker-tutorial/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker教程"><a href="#Docker教程" class="headerlink" title="Docker教程"></a>Docker教程</h1><p>#Docker需要sudo权限，可以把用户加入用户组</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo usermod -aG docker $USER</span><br></pre></td></tr></table></figure><h2 id="Docker架构"><a href="#Docker架构" class="headerlink" title="Docker架构"></a>Docker架构</h2><p>Docker**(C&#x2F;S)**架构程序，可以在同一台宿主机上运行 Docker 守护进程和客户端，也可以从本地的 Docker 客户端连接到运行在另一台宿主机上的远程 Docker 守护进程。</p><h3 id="镜像与容器"><a href="#镜像与容器" class="headerlink" title="镜像与容器"></a>镜像与容器</h3><p>(image)镜像是静态的定义，(container)容器是镜像运行时的实体。通过镜像启动一个容器，一个镜像就是一个可执行的包，其中包括运行应用程序所需要的所有内容：包含代码，运行时间，库，环境变量和配置文件等。</p><h4 id="镜像分层"><a href="#镜像分层" class="headerlink" title="镜像分层"></a>镜像分层</h4><p>​通过扩展现有镜像，创建新的镜像。新镜像是从 base 镜像一层一层叠加生成的。每安装一个软件，就在现有镜像的基础上增加一层。</p><p>Docker Host 只需在磁盘上保存一份 base 镜像；同时内存中也只需加载一份 base 镜像，就可以为所有容器服务了。而且镜像的每一层都可以被<strong>共享</strong>。</p><h4 id="Copy-on-Write"><a href="#Copy-on-Write" class="headerlink" title="Copy-on-Write"></a>Copy-on-Write</h4><p>​<strong>容器层可写，镜像层只读</strong>。所有镜像层会联合在一起组成一个统一的文件系统（从上到下，会覆盖），容器层（新的可写层被加载到镜像的顶部）中，用户看到的是一个<strong>叠加之后的文件系统</strong>。容器层保存的是镜像变化的部分，不会对镜像本身进行任何修改。</p><h3 id="volume数据卷"><a href="#volume数据卷" class="headerlink" title="volume数据卷"></a>volume数据卷</h3><p>将宿主机的目录映射到容器中的目录，应用程序在容器中的目录读写数据会同步到宿主机上，这样容器产生的数据就可以持久化。</p><h3 id="registry注册中心"><a href="#registry注册中心" class="headerlink" title="registry注册中心"></a>registry注册中心</h3><p>Docker 用 Registry 来保存用户构建的镜像。Docker 公司提供了公共的镜像仓库，一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。</p><p>#&lt;仓库名&gt;:&lt;标签&gt; 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签。</p><h2 id="Docker使用"><a href="#Docker使用" class="headerlink" title="Docker使用"></a>Docker使用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">启动服务</span></span><br><span class="line">sudo service docker start</span><br><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><h3 id="image文件"><a href="#image文件" class="headerlink" title="image文件"></a>image文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">抓取image文件</span></span><br><span class="line">docker image pull &lt;文件组/文件名&gt;#官方提供image都在library组里面，默认组可忽略</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">管理</span></span><br><span class="line">docker image ls#列出本机所有image文件</span><br><span class="line">docker image rm [imageName]#删除image文件</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">Dockerfile创建image</span></span><br><span class="line">docker image build -t &lt;imageName:tag&gt; .#-t指定名字，默认tag为latest,&#x27;.&#x27;表示当前路径</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">发布image</span></span><br><span class="line">docker login#登录</span><br><span class="line">docker image tag &lt;imageName：tag&gt; &lt;username&gt;/&lt;repository&gt;:&lt;tag&gt;#标注用户名和版本</span><br><span class="line">docker image build -t &lt;username&gt;/&lt;repository&gt;:&lt;tag&gt;#重新构建一下</span><br><span class="line">docker image push &lt;username&gt;/&lt;repository&gt;:&lt;tag&gt;#发布</span><br></pre></td></tr></table></figure><h3 id="container"><a href="#container" class="headerlink" title="container"></a>container</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">从image中生成一个运行的容器</span></span><br><span class="line">docker container run -p &lt;Lport&gt;:&lt;Dport&gt; -it &lt;imageName:tag&gt; /bin/bash#未找到image会自动去仓库抓取,-p 容器端口映射到本机端口，-it 容器shell映射到当前shell,&lt;command&gt; 启动后内部第一个执行的命令,启动shell保证用户使用</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">管理</span></span><br><span class="line">docker container ls --all#列出正在运行虚拟机，-all列出所有（包括终止运行的）</span><br><span class="line">docker container start &lt;containID&gt;#启动已生成/停止运行的程序</span><br><span class="line">docker container rm &lt;containID&gt;#删除</span><br><span class="line">docker container run --rm &lt;containID&gt;#运行终止后自动删除容器文件</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">终止</span></span><br><span class="line">docker container kill &lt;containID&gt;#一般程序运行完自动终止，服务不会，需要手动(SIGKILL强制立即终止，操作可能丢失)</span><br><span class="line">docker container stop &lt;containID&gt;#SIGTERM 资源释放等，再结束</span><br></pre></td></tr></table></figure><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>#Dockerfile 是一个文本文件，用来配置 image。Docker 根据 该文件生成二进制的 image 文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone &lt;url&gt;#下载项目源码</span><br><span class="line">cd &lt;文件路径&gt;#打开此路径</span><br></pre></td></tr></table></figure><p>​&#x2F;项目根目录</p><h4 id="dockerignore"><a href="#dockerignore" class="headerlink" title=".dockerignore"></a>.dockerignore</h4><p>​#路径排除，拷贝目录中的文件时排除此文件中的目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line"></span><br><span class="line">.git</span><br><span class="line">node_modules</span><br><span class="line">npm-debug.log</span><br></pre></td></tr></table></figure><h4 id="Dokerfile"><a href="#Dokerfile" class="headerlink" title="Dokerfile"></a>Dokerfile</h4><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> &lt;imageName&gt;:&lt;tag&gt;</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . &lt;dirName&gt;<span class="comment">#将当前目录下的所有文件（除了.dockerignore排除的路径），都拷贝进入 image 文件的&lt;dirName&gt;目录。</span></span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> &lt;dirName&gt;<span class="comment">#指定接下来的工作路径为&lt;dir&gt;。</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> &lt;<span class="built_in">command</span>&gt;<span class="comment">#在&lt;dir&gt;目录下，运行&lt;command&gt;命令安装依赖。注意，安装后所有的依赖，都将打包进入 image 文件（image构建过程中）。</span></span></span><br><span class="line"><span class="keyword">EXPOSE</span> &lt;port&gt;<span class="comment">#将容器&lt;port&gt;端口暴露出来， 允许外部连接这个端口。</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> &lt;<span class="built_in">command</span>&gt;<span class="comment">#容器启动后自动执行的命令（设置此字段后不用再在生成容器时追加自动执行命令，会覆盖CMD）</span></span></span><br></pre></td></tr></table></figure><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">eg:</span><br><span class="line"><span class="keyword">FROM</span> node:<span class="number">8.4</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /app</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm install --registry=https://registry.npm.taobao.org</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">3000</span></span><br></pre></td></tr></table></figure><h3 id="docker使用"><a href="#docker使用" class="headerlink" title="docker使用"></a>docker使用</h3><h4 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">未使用-it参数时</span></span><br><span class="line">docker container exec -it &lt;containID&gt; /bin/bash#进入一个正在运行的容器</span><br><span class="line">docker container logs &lt;containID&gt;#查看容器输出</span><br></pre></td></tr></table></figure><h4 id="拷贝文件"><a href="#拷贝文件" class="headerlink" title="拷贝文件"></a>拷贝文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker container cp &lt;containID&gt;:&lt;/SRC_path|file&gt; &lt;DEST_PATH|FILE&gt;#复制容器文件到主机</span><br><span class="line">docker cp &lt;SRC_path|file&gt; &lt;containID&gt;:&lt;DEST_PATH|FILE&gt;#主机复制文件到容器</span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">查看所有运行容器</span></span><br><span class="line">docker ps#-a所有（包括不运行的）</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">删除全部容器</span></span><br><span class="line">docker stop $(docker ps -q)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">停用全部运行中的容器</span></span><br><span class="line">docker stop $(docker ps -q)#停用并删除加&#x27;&amp;&#x27;连接</span><br></pre></td></tr></table></figure><h4 id="终止"><a href="#终止" class="headerlink" title="终止"></a>终止</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">列出所有的容器 ID</span></span><br><span class="line">docker ps -aq</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">停止所有的容器</span></span><br><span class="line">docker stop $(docker ps -aq)</span><br><span class="line">sudo docker stop $(sudo docker ps -aq)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">删除所有的容器</span></span><br><span class="line">docker rm $(docker ps -aq)</span><br><span class="line">sudo docker rm $(sudo docker ps -aq)</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">删除所有的镜像</span></span><br><span class="line">docker rmi $(docker images -q)</span><br><span class="line">或</span><br><span class="line">sudo docker rmi $(sudo docker images -q)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装(CentOS)</title>
      <link href="/2021/10/10/Install-Docker-in-the-CentOS/"/>
      <url>/2021/10/10/Install-Docker-in-the-CentOS/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker安装（CentOS）"><a href="#Docker安装（CentOS）" class="headerlink" title="Docker安装（CentOS）"></a>Docker安装（CentOS）</h1><h3 id="检查配置"><a href="#检查配置" class="headerlink" title="检查配置"></a>检查配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">要求CentOS内核版本高于3.10</span></span><br><span class="line">uname -r</span><br></pre></td></tr></table></figure><h4 id="卸载之前安装"><a href="#卸载之前安装" class="headerlink" title="卸载之前安装"></a>卸载之前安装</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker</span><br><span class="line">yum remove docker-client</span><br><span class="line">…… ……   docker-client-latest</span><br><span class="line">           docker-common</span><br><span class="line">           docker-latest</span><br><span class="line">           docker-latest-logrotate</span><br><span class="line">           docker-logrotate</span><br><span class="line">   docker-engine</span><br></pre></td></tr></table></figure><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils</span><br><span class="line">……device-mapper-persistent-data</span><br><span class="line">lvm2</span><br></pre></td></tr></table></figure><h3 id="设置仓库"><a href="#设置仓库" class="headerlink" title="设置仓库"></a>设置仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo#docker的yum源</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">aliyun的yum源</span></span><br><span class="line">http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h3 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">加入开机启动</span></span><br><span class="line">systemctl start docker</span><br><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure><p>#验证安装docker -v</p><h3 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a>镜像加速</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">https://www.aliyun.com/product/acr?spm=5176.202918.1263681.2.1bf54ef51HwG0Z</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">管理控制台——镜像加速——操作手册</span></span><br><span class="line"></span><br><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://bi7rlmvn.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">国内源有时无法拉取部分镜像</span></span><br><span class="line"><span class="meta">#</span><span class="bash">可换源</span></span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">&quot;registry-mirrors&quot;:[&quot;f42ebfb9.m.daocloud.io&quot;]</span><br><span class="line">&#125;</span><br><span class="line">systemctl restart docker#重启生效</span><br><span class="line"></span><br><span class="line">docker info</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS7内核升级</title>
      <link href="/2021/10/10/CentOS7-s-kernel-upgrade/"/>
      <url>/2021/10/10/CentOS7-s-kernel-upgrade/</url>
      
        <content type="html"><![CDATA[<h1 id="CentOS7内核升级"><a href="#CentOS7内核升级" class="headerlink" title="CentOS7内核升级"></a>CentOS7内核升级</h1><p>Linux 只是个内核，内核通过内置的驱动程序或以后可作为模块安装的驱动程序与硬件通信。</p><ol><li>作为硬件和系统上运行的软件之间的接口。</li><li>尽可能高效地管理系统资源。</li></ol><p>#CentOS允许使用ELRepo第三方仓库，可将内核升级为最新版本</p><h3 id="查看版本信息"><a href="#查看版本信息" class="headerlink" title="查看版本信息"></a>查看版本信息</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -sr</span><br></pre></td></tr></table></figure><h3 id="启用ELRepo仓库"><a href="#启用ELRepo仓库" class="headerlink" title="启用ELRepo仓库"></a>启用ELRepo仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rpm --import  https://www.elrepo.org/RPM-GPG-KEY-elrepo.org</span><br><span class="line">rpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpm</span><br><span class="line"></span><br><span class="line">——列出内核相关包——</span><br><span class="line">yum --disablerepo=&quot;*&quot; --enablerepo=&quot;elrepo-kernel&quot; list available</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">我选择的kenel-ml.x86_64稳定版</span></span><br></pre></td></tr></table></figure><h3 id="安装内核"><a href="#安装内核" class="headerlink" title="安装内核"></a>安装内核</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum --enablerepo=elrepo-kernel install kernel-ml</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h3 id="设置GRUB默认内核版本"><a href="#设置GRUB默认内核版本" class="headerlink" title="设置GRUB默认内核版本"></a>设置GRUB默认内核版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">/etc/default/grub</span></span><br><span class="line">GRUB_DEFAULT=0</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">重新创建内核配置</span></span><br><span class="line">grub2-mkconfig -o /boot/grub2/grub.cfg</span><br><span class="line"></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vmware </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>naokr&#39;s re WP(misc1)</title>
      <link href="/2021/10/08/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB%EF%BC%88WP%EF%BC%89/"/>
      <url>/2021/10/08/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB%EF%BC%88WP%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="杂七杂八（WP）"><a href="#杂七杂八（WP）" class="headerlink" title="杂七杂八（WP）"></a>杂七杂八（WP）</h1><h2 id="NPUCTF2020-Baby-Obfuscation"><a href="#NPUCTF2020-Baby-Obfuscation" class="headerlink" title="[NPUCTF2020]Baby Obfuscation"></a>[NPUCTF2020]Baby Obfuscation</h2><p><a href="https://app.yinxiang.com/fx/3cbb8832-85f0-40e6-8875-bef5edb9e035">https://app.yinxiang.com/fx/3cbb8832-85f0-40e6-8875-bef5edb9e035</a></p><h2 id="羊城杯-2020-login"><a href="#羊城杯-2020-login" class="headerlink" title="[羊城杯 2020]login"></a>[羊城杯 2020]login</h2><p><a href="https://app.yinxiang.com/fx/a2763a50-fbd4-4c1e-9f26-a7e8ea4f9eb4">https://app.yinxiang.com/fx/a2763a50-fbd4-4c1e-9f26-a7e8ea4f9eb4</a></p><h2 id="CFI-CTF-2018-IntroToPE"><a href="#CFI-CTF-2018-IntroToPE" class="headerlink" title="[CFI-CTF 2018]IntroToPE"></a>[CFI-CTF 2018]IntroToPE</h2><p><a href="https://app.yinxiang.com/fx/7e9f3506-f34e-4872-bb61-2b30fa02350d">https://app.yinxiang.com/fx/7e9f3506-f34e-4872-bb61-2b30fa02350d</a></p><h2 id="FlareOn1-Bob-Doge"><a href="#FlareOn1-Bob-Doge" class="headerlink" title="[FlareOn1]Bob Doge"></a>[FlareOn1]Bob Doge</h2><p><a href="https://app.yinxiang.com/fx/50eab628-8187-46fd-9c2c-5974529ea151">https://app.yinxiang.com/fx/50eab628-8187-46fd-9c2c-5974529ea151</a></p><h2 id="findKey"><a href="#findKey" class="headerlink" title="findKey"></a>findKey</h2><p><a href="https://app.yinxiang.com/fx/e568e4b2-bb4c-45dc-bfdc-2524f95b2dc9">https://app.yinxiang.com/fx/e568e4b2-bb4c-45dc-bfdc-2524f95b2dc9</a></p><h2 id="BJDCTF2020-BJD-hamburger-competition"><a href="#BJDCTF2020-BJD-hamburger-competition" class="headerlink" title="[BJDCTF2020]BJD hamburger competition"></a>[BJDCTF2020]BJD hamburger competition</h2><p><a href="https://app.yinxiang.com/fx/f4ff4983-827c-4859-bfa4-c91dcb1d5233">https://app.yinxiang.com/fx/f4ff4983-827c-4859-bfa4-c91dcb1d5233</a></p><h2 id="GWCTF-xxor"><a href="#GWCTF-xxor" class="headerlink" title="GWCTF xxor"></a>GWCTF xxor</h2><p><a href="https://app.yinxiang.com/fx/34a2c3f4-0f62-41e3-8380-814ba495d39a">https://app.yinxiang.com/fx/34a2c3f4-0f62-41e3-8380-814ba495d39a</a></p><h2 id="WUSTCTF2020-Cr0ssfun"><a href="#WUSTCTF2020-Cr0ssfun" class="headerlink" title="[WUSTCTF2020]Cr0ssfun"></a>[WUSTCTF2020]Cr0ssfun</h2><p><a href="https://app.yinxiang.com/fx/a74ab13b-d9c6-4567-b78e-ca926fe4bb5b">https://app.yinxiang.com/fx/a74ab13b-d9c6-4567-b78e-ca926fe4bb5b</a></p><h2 id="WUSTCTF2020-level3"><a href="#WUSTCTF2020-level3" class="headerlink" title="[WUSTCTF2020]level3"></a>[WUSTCTF2020]level3</h2><p><a href="https://app.yinxiang.com/fx/d586c819-6725-4972-9297-06c16d128455">https://app.yinxiang.com/fx/d586c819-6725-4972-9297-06c16d128455</a></p><h2 id="MRCTF2020-hello-world-go"><a href="#MRCTF2020-hello-world-go" class="headerlink" title="[MRCTF2020]hello_world_go"></a>[MRCTF2020]hello_world_go</h2><p><a href="https://app.yinxiang.com/fx/c6349d44-1b2f-4691-b4e3-26c20a84b6ed">https://app.yinxiang.com/fx/c6349d44-1b2f-4691-b4e3-26c20a84b6ed</a></p><h2 id="MRCTF2020-Xor"><a href="#MRCTF2020-Xor" class="headerlink" title="[MRCTF2020]Xor"></a>[MRCTF2020]Xor</h2><p><a href="https://app.yinxiang.com/fx/0a329b08-c011-4417-9903-8651ab11c7ea">https://app.yinxiang.com/fx/0a329b08-c011-4417-9903-8651ab11c7ea</a></p><h2 id="FlareOn4-IgniteMe"><a href="#FlareOn4-IgniteMe" class="headerlink" title="[FlareOn4]IgniteMe"></a>[FlareOn4]IgniteMe</h2><p><a href="https://app.yinxiang.com/fx/85d350c4-925e-44d8-8e8e-e4a2378e3ff0">https://app.yinxiang.com/fx/85d350c4-925e-44d8-8e8e-e4a2378e3ff0</a></p><h2 id="SUCTF2019-SignIn"><a href="#SUCTF2019-SignIn" class="headerlink" title="[SUCTF2019]SignIn"></a>[SUCTF2019]SignIn</h2><p><a href="https://app.yinxiang.com/fx/34e6a370-a9da-4ae3-a15e-61b29867298f">https://app.yinxiang.com/fx/34e6a370-a9da-4ae3-a15e-61b29867298f</a></p><h2 id="WUSTCTF2020-level1"><a href="#WUSTCTF2020-level1" class="headerlink" title="[WUSTCTF2020]level1"></a>[WUSTCTF2020]level1</h2><p><a href="https://app.yinxiang.com/fx/cfc67176-9517-4961-9498-a353e34bcb4b">https://app.yinxiang.com/fx/cfc67176-9517-4961-9498-a353e34bcb4b</a></p><h2 id="MRCTF2020-Transform"><a href="#MRCTF2020-Transform" class="headerlink" title="[MRCTF2020]Transform"></a>[MRCTF2020]Transform</h2><p><a href="https://app.yinxiang.com/fx/2cd11373-6f6f-410c-b843-06cb1a0c0e07">https://app.yinxiang.com/fx/2cd11373-6f6f-410c-b843-06cb1a0c0e07</a></p><h2 id="BJDCTF2020-easy"><a href="#BJDCTF2020-easy" class="headerlink" title="[BJDCTF2020]easy"></a>[BJDCTF2020]easy</h2><p><a href="https://app.yinxiang.com/fx/14123ae4-2968-41d3-9f1a-8fed9cc6c512">https://app.yinxiang.com/fx/14123ae4-2968-41d3-9f1a-8fed9cc6c512</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android基础（1）|  结构、APK、虚拟机</title>
      <link href="/2021/09/12/Android%E5%9F%BA%E7%A1%80%EF%BC%881%EF%BC%89-%E7%BB%93%E6%9E%84%E3%80%81APK%E3%80%81%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
      <url>/2021/09/12/Android%E5%9F%BA%E7%A1%80%EF%BC%881%EF%BC%89-%E7%BB%93%E6%9E%84%E3%80%81APK%E3%80%81%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="Android基础（1）-结构、APK、虚拟机"><a href="#Android基础（1）-结构、APK、虚拟机" class="headerlink" title="Android基础（1）|  结构、APK、虚拟机"></a>Android基础（1）|  结构、APK、虚拟机</h1><h2 id="Android体系结构"><a href="#Android体系结构" class="headerlink" title="Android体系结构"></a>Android体系结构</h2><p>原文：<a href="https://zhuanlan.zhihu.com/p/26100298">Android系统架构开篇 - 知乎 (zhihu.com)</a></p><h2 id="APK基本结构"><a href="#APK基本结构" class="headerlink" title="APK基本结构"></a>APK基本结构</h2><p>原文：<a href="https://www.cnblogs.com/hyit/articles/12510395.html">安卓逆向之路 基础扫盲 - 沐风先生 - 博客园 (cnblogs.com)</a></p><p>#.apk是zip压缩包文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">assets           静态资源文件(图片、音频、数据库、网页、配置文件等),不生成资源ID</span><br><span class="line"></span><br><span class="line">res              资源文件，需要编译(布局),会出现在清单文件R.java（类）索引中</span><br><span class="line"></span><br><span class="line">lib               各种平台下使用的对应的so文件,C++</span><br><span class="line"></span><br><span class="line">libs             </span><br><span class="line"></span><br><span class="line">META-INF       签名文件</span><br><span class="line"></span><br><span class="line">resources.arsc资源索引表（映射），描述具ID值的资源配置信息</span><br><span class="line"></span><br><span class="line">AndroidManifest.xml 清单文件(图标、界面、权限、入口)配置和声明</span><br><span class="line"></span><br><span class="line">classes.dex      源代码，超过65535会进行分包处理，可通过反编译工具dex2jar转化成jar包。</span><br></pre></td></tr></table></figure><h3 id="META-INF"><a href="#META-INF" class="headerlink" title="#META-INF"></a>#META-INF</h3><p>#原文：<a href="https://www.jianshu.com/p/0e588b222c76?utm_campaign=maleskine&utm_content=note&utm_medium=seo_notes&utm_source=recommendation">Android生成APK后目录中META-INF目录文件解析 - 简书 (jianshu.com)</a></p><p>一个APK文件的后缀名从.apk改为.zip或者.rar，解压，META-INF目录下看到四个文件：MANIFEST.MF、CERT.SF、INDEX.LIST、CERT.RSA</p><h4 id="MANIFEST-MF"><a href="#MANIFEST-MF" class="headerlink" title="MANIFEST.MF"></a>MANIFEST.MF</h4><p>​摘要文件，历APK包中的所有文件，对非文件夹非签名文件的文件，逐个用SHA1生成摘要信息，再用Base64进行编码。校验信息不同，程序将无法正常安装。</p><h4 id="CERT-SF"><a href="#CERT-SF" class="headerlink" title="CERT.SF"></a>CERT.SF</h4><p>​对于生成的MANIFEST.MF文件利用SHA1-RSA算法<strong>对开发者的私钥进行签名</strong>。在<strong>安装时</strong>只有公共密钥才能对其解密。解密之后将其与未加密的摘要信息进行比对，如果相符则文件没有被修改。</p><h4 id="INDEX-LIST"><a href="#INDEX-LIST" class="headerlink" title="INDEX.LIST"></a>INDEX.LIST</h4><p>​APK索引文件目录</p><h4 id="CERT-RSA"><a href="#CERT-RSA" class="headerlink" title="CERT.RSA"></a>CERT.RSA</h4><p>​保存公钥、加密算法等信息</p><h2 id="JVM、DVM与ART"><a href="#JVM、DVM与ART" class="headerlink" title="JVM、DVM与ART"></a>JVM、DVM与ART</h2><h3 id="JVM"><a href="#JVM" class="headerlink" title="JVM"></a>JVM</h3><p>Java虚拟机，运行的是.java文件编译后的**.class文件**</p><h3 id="Dalvik"><a href="#Dalvik" class="headerlink" title="Dalvik"></a>Dalvik</h3><p>Android4.4及以前使用的都是Dalvik虚拟机，我们知道Apk在打包的过程中会先将java等源码通过javac编译成.class文件，但是我们的Dalvik虚拟机只会执行**.dex文件<strong>，这个时候dx会将.class文件转换成Dalvik虚拟机执行的.dex文件。Dalvik虚拟机在启动的时候会先将.dex文件转换成快速运行的机器码，又因为65535这个问题，导致我们在应用冷启动的时候有一个</strong>合包<strong>的过程，最后导致的一个结果就是我们的app启动慢，这就是Dalvik虚拟机的</strong>JIT特性**。</p><h3 id="ART"><a href="#ART" class="headerlink" title="ART"></a>ART</h3><p>ART虚拟机是在Android5.0才开始使用的Android虚拟机，ART虚拟机必须要兼容Dalvik虚拟机的特性，但是ART有一个很好的特性AOT（ahead of time），这个特性就是我们<strong>在安装APK的时候就将dex直接处理成可直接供ART虚拟机使用的机器码</strong>，ART虚拟机将.dex文件转换成<strong>可直接运行的.oat文件</strong>，ART虚拟机天生支持多dex，所以也不会有一个合包的过程，所以ART虚拟机会很大的提升APP冷启动速度。</p><p>Xposed hook的是Java代码，所以Xposed不支持5.0以及以上系统。</p><h2 id="APK打包流程"><a href="#APK打包流程" class="headerlink" title="APK打包流程"></a>APK打包流程</h2><p>![img](<a href="https://img2020.cnblogs.com/blog/795445/202011/795445-20201107185648005-1582565761.png">https://img2020.cnblogs.com/blog/795445/202011/795445-20201107185648005-1582565761.png</a></p><h2 id="APK安装流程"><a href="#APK安装流程" class="headerlink" title="APK安装流程"></a>APK安装流程</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">system/app#系统自带应用程序，adb root权限才能删除</span><br><span class="line">data/app#用户程序安装目录,安装时apk复制至此</span><br><span class="line">data/data#存放应用程序数据</span><br><span class="line">data/dalvik-cache#apk的dex文件安装到dalvik-cache目录下</span><br></pre></td></tr></table></figure><p>安装：复制APK到data&#x2F;app目录下，解压并扫描安装包，把dex文件（Dalvik字节码）保存到dalvik-cache目录，并data&#x2F;data目录下创建对应的应用数据目录。</p><p>删除：扫描上述三个目录创建的文件及目录</p><h2 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h2><p>原文：<a href="https://blog.csdn.net/wangwangli6/article/details/79813531">(9条消息) android 虚拟机介绍_旺仔的专栏-CSDN博客_安卓虚拟机</a></p><h3 id="Java虚拟机"><a href="#Java虚拟机" class="headerlink" title="Java虚拟机"></a>Java虚拟机</h3><p>不是真实的物理机，JVM是一种用于计算设备的规范，没有寄存器，指令集是使用Java栈来存储中间数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dalvik虚拟机与Java虚拟机区别：</span><br><span class="line"></span><br><span class="line">      1）dalvik基于寄存器，而JVM基于stack</span><br><span class="line">      2）Dalvik执行的是特有的DEX文件格式，而JVM运行的是*.class文件格式。</span><br><span class="line">dalvik优势：</span><br><span class="line">      1）在编译时提前优化代码而不是等到运行时</span><br><span class="line">      2）虚拟机很小，使用的空间也小；被设计来满足可高效运行多种虚拟机实例。</span><br><span class="line">      3）常量池已被修改为只使用32位的索引，以 简化解释器</span><br></pre></td></tr></table></figure><h3 id="Dalvik虚拟机"><a href="#Dalvik虚拟机" class="headerlink" title="Dalvik虚拟机"></a>Dalvik虚拟机</h3><p>指令集基于寄存器架构，执行其特有的文件格式——dex字节码，主要负责完成对象生命周期管理、堆栈管理、线程管理、安全异常管理、垃圾回收等重要功能。</p><h5 id="Dalvik进程管理"><a href="#Dalvik进程管理" class="headerlink" title="Dalvik进程管理"></a>Dalvik进程管理</h5><p>​#android4.4以前</p><p>​依赖于linux的进程体系结构，<strong>Zygote</strong>是一个虚拟机进程，同时也是一个<strong>虚拟机实例的孵化器</strong>，它通过<strong>init进程启动。首先会孵化出System_Server</strong>（android绝大多系统服务的守护进程，它会<strong>监听socket</strong>等待请求命令，当有一个应用程序启动时，就会向它发出请求，zygote就会<strong>FORK</strong>出一个新的应用程序进程）.每当系统要求执行一个android应用程序时，Zygote就会运用linux的FORK进制产生一个子进程来执行该应用程序。 #不同的应用在不同的进程空间里运行，最大程度的保护应用的安全和独立运行。</p><h3 id="ART虚拟机"><a href="#ART虚拟机" class="headerlink" title="ART虚拟机"></a>ART虚拟机</h3><p>​为了降低应用的开发难度，并将其适配到不同硬件配置的设备上，在Linux内核之上构建了一个虚拟机，Android应用使用java开发，运行在虚拟机之上。<strong>AOT(Ahead-Of-Time)技术</strong>，会在<strong>应用程序安装时就转换成机器语言</strong>，不再在执行时解释，从而优化了应用运行的速度。在内存管理方面，对内存分配和回收都做了算法优化，降低了内存碎片化程度，回收时间也得以缩短。</p><h5 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h5><p>​ART虚拟机首先会从系统空间中取得足够的空间，这些空间在没有使用的时候并不占用物理内存，在使用的时候才分配物理内存，在不需要的时候及时归还给系统。ART 将分配到的空间根据需要托管给不同的算法进行管理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">AllocatorType</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">kAllocatorTypeBumpPointer,  <span class="comment">// Use BumpPointer allocator, has entrypoints.</span></span><br><span class="line"></span><br><span class="line">kAllocatorTypeTLAB,  <span class="comment">// Use TLAB allocator, has entrypoints.</span></span><br><span class="line"></span><br><span class="line">kAllocatorTypeRosAlloc,  <span class="comment">// Use RosAlloc allocator, has entrypoints.</span></span><br><span class="line"></span><br><span class="line">kAllocatorTypeDlMalloc,  <span class="comment">// Use dlmalloc allocator, has entrypoints.</span></span><br><span class="line"></span><br><span class="line">kAllocatorTypeNonMoving,  <span class="comment">// Special allocator for non moving objects, doesn&#x27;t have entrypoints.</span></span><br><span class="line"></span><br><span class="line">kAllocatorTypeLOS,  <span class="comment">// Large object space, also doesn&#x27;t have entrypoints.</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>**RosAlloc(Rows of slots Allocator)**：在Ros Alloc Space分配对象，是一种线性分配方式，将一个大的连续空间划分为多个片，每个片中只能分配固定大小的内存。这种分配方式有一个更加细粒度的结构，可以锁定独立的对象。</p><p><strong>BumpPointer</strong>：在Bump Pointer Space中分配对象。每一次申请时，分配需要的size，返回end地址的值。然后将end后移sized，作为下一次申请的地址。这种分配采用不计数申请的方式，直到发生out of memory。采用Moving GC的方式进行回收。</p><p>**TLAB（Thread Local Allocation Block)**：在由Bump Pointer Space提供的线程局部分配缓冲区中分配对象，按线程进行管理。每一个线程，从Bump Pointer Space中申请一个block，在线程内使用Bump Pointer的分配策略。由于每一个线程独立在自己的block中分配内存，避免了同步，可以提高效率。减少了申请内存时线程之间的竞争。</p><p><strong>DLMalloc</strong>：这是原Dalvik使用的算法 。在Dl Malloc Space分配对象，将memory划分成很多小的数据块，每一个块的前8个或者16个字节作为Header，使用链表来管理空闲的数据块。</p><p>​内存回收方面，ART也提供了几种GC算法，GC算法与内存分配算法相对应（后续再补）</p><h5 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h5><pre><code>     Java文件在编译成class文件，然后经过Android平台的dx工具转换为Dex文件后，同Native code（JNI）和资源一起打包成apk，apk安装到手机后解压出Dex文件。Dalvik会通过dexopt工具将Dex优化，成为Odex文件，Odex文件的效率比Dex高，但其中大部分代码仍然需要每次执行时编译；而ART则会将Dex通过dex2oat工具编译得到一个ELF文件，它是一个可执行的文件。</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GKCTF2020 BabyDrive</title>
      <link href="/2021/09/11/GKCTF2020-BabyDrive/"/>
      <url>/2021/09/11/GKCTF2020-BabyDrive/</url>
      
        <content type="html"><![CDATA[<h1 id="GKCTF2020BabyDriver"><a href="#GKCTF2020BabyDriver" class="headerlink" title="GKCTF2020BabyDriver"></a>GKCTF2020BabyDriver</h1><p>.sys文件</p><p>扔进ida，查看字符串，感觉是迷宫题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">****************</span><br><span class="line">o.*..*......*..*</span><br><span class="line">*.**...**.*.*.**</span><br><span class="line">*.****.**.*.*.**</span><br><span class="line">*...**....*.*.**</span><br><span class="line">***..***.**.*..*</span><br><span class="line">*.**.***.**.**.*</span><br><span class="line">*.**.******.**.*</span><br><span class="line">*.**....***.**.*</span><br><span class="line">*.*****.***....*</span><br><span class="line">*...***.********</span><br><span class="line">**..***......#**</span><br><span class="line">**.*************</span><br><span class="line">****************</span><br></pre></td></tr></table></figure><p>跟进主要逻辑</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">_int64 __fastcall <span class="title">sub_140001380</span><span class="params">(__int64 a1, __int64 a2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 v3; <span class="comment">// rdi</span></span><br><span class="line">  __int64 v4; <span class="comment">// rax</span></span><br><span class="line">  <span class="keyword">int</span> v5; <span class="comment">// ecx</span></span><br><span class="line">  __int16 *v6; <span class="comment">// rsi</span></span><br><span class="line">  __int64 v7; <span class="comment">// rbp</span></span><br><span class="line">  __int16 v8; <span class="comment">// dx</span></span><br><span class="line">  <span class="keyword">char</span> v9; <span class="comment">// dl</span></span><br><span class="line">  <span class="keyword">const</span> CHAR *v10; <span class="comment">// rcx</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( *(<span class="keyword">int</span> *)(a2 + <span class="number">48</span>) &gt;= <span class="number">0</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v3 = *(_QWORD *)(a2 + <span class="number">24</span>);</span><br><span class="line">    v4 = *(_QWORD *)(a2 + <span class="number">56</span>) &gt;&gt; <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> ( (_DWORD)v4 )</span><br><span class="line">    &#123;</span><br><span class="line">      v5 = dword_1400030E4;                     <span class="comment">// 10h</span></span><br><span class="line">      v6 = (__int16 *)(v3 + <span class="number">2</span>);</span><br><span class="line">      v7 = (<span class="keyword">unsigned</span> <span class="keyword">int</span>)v4;</span><br><span class="line">      <span class="keyword">while</span> ( *(_WORD *)(v3 + <span class="number">4</span>) )</span><br><span class="line">      &#123;</span><br><span class="line">LABEL_28:</span><br><span class="line">        v6 += <span class="number">6</span>;</span><br><span class="line">        <span class="keyword">if</span> ( !--v7 )</span><br><span class="line">          <span class="keyword">goto</span> LABEL_29;</span><br><span class="line">      &#125;</span><br><span class="line">      aO[v5] = <span class="string">&#x27;.&#x27;</span>;                             <span class="comment">// &#x27;.&#x27;为通路</span></span><br><span class="line">      v8 = *v6;</span><br><span class="line">      <span class="keyword">if</span> ( *v6 == <span class="number">23</span> )<span class="comment">//opcode为23</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( (v5 &amp; <span class="number">0xFFFFFFF0</span>) != <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v5 -= <span class="number">16</span>;<span class="comment">//根据迷宫为16一行，猜测这是“上”</span></span><br><span class="line">          <span class="keyword">goto</span> LABEL_21;</span><br><span class="line">        &#125;</span><br><span class="line">        v5 += <span class="number">208</span>;</span><br><span class="line">        dword_1400030E4 = v5;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( v8 == <span class="number">37</span> )<span class="comment">//opcode为37</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( (v5 &amp; <span class="number">0xFFFFFFF0</span>) != <span class="number">208</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          v5 += <span class="number">16</span>;<span class="comment">//&quot;下&quot;</span></span><br><span class="line">          <span class="keyword">goto</span> LABEL_21;</span><br><span class="line">        &#125;</span><br><span class="line">        v5 -= <span class="number">208</span>;</span><br><span class="line">        dword_1400030E4 = v5;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( v8 == <span class="number">36</span> )<span class="comment">//opcode为36</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( (v5 &amp; <span class="number">0xF</span>) != <span class="number">0</span> )</span><br><span class="line">        &#123;</span><br><span class="line">          --v5;<span class="comment">//&quot;左&quot;</span></span><br><span class="line">          <span class="keyword">goto</span> LABEL_21;</span><br><span class="line">        &#125;</span><br><span class="line">        v5 += <span class="number">15</span>;</span><br><span class="line">        dword_1400030E4 = v5;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> ( v8 != <span class="number">38</span> )<span class="comment">//opcode为38</span></span><br><span class="line">        <span class="keyword">goto</span> LABEL_22;</span><br><span class="line">      <span class="keyword">if</span> ( (v5 &amp; <span class="number">0xF</span>) == <span class="number">15</span> )</span><br><span class="line">        v5 -= <span class="number">15</span>;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">        ++v5;<span class="comment">//&quot;右&quot;</span></span><br><span class="line">LABEL_21:</span><br><span class="line">      dword_1400030E4 = v5;</span><br><span class="line">LABEL_22:</span><br><span class="line">      v9 = aO[v5];</span><br><span class="line">      <span class="keyword">if</span> ( v9 == <span class="string">&#x27;*&#x27;</span> )</span><br><span class="line">      &#123;</span><br><span class="line">        v10 = <span class="string">&quot;failed!\n&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="keyword">if</span> ( v9 != <span class="number">35</span> )</span><br><span class="line">        &#123;</span><br><span class="line">LABEL_27:</span><br><span class="line">          aO[v5] = <span class="string">&#x27;o&#x27;</span>;<span class="comment">//&#x27;o&#x27;为起点</span></span><br><span class="line">          <span class="keyword">goto</span> LABEL_28;</span><br><span class="line">        &#125;</span><br><span class="line">        v10 = <span class="string">&quot;success! flag is flag&#123;md5(input)&#125;\n&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      dword_1400030E4 = <span class="number">16</span>;</span><br><span class="line">      DbgPrint(v10);</span><br><span class="line">      v5 = dword_1400030E4;</span><br><span class="line">      <span class="keyword">goto</span> LABEL_27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">LABEL_29:</span><br><span class="line">  <span class="keyword">if</span> ( *(_BYTE *)(a2 + <span class="number">65</span>) )</span><br><span class="line">    *(_BYTE *)(*(_QWORD *)(a2 + <span class="number">184</span>) + <span class="number">3</span>i64) |= <span class="number">1u</span>;</span><br><span class="line">  <span class="keyword">return</span> *(<span class="keyword">unsigned</span> <span class="keyword">int</span> *)(a2 + <span class="number">48</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>中间变量看着眼花，找有关迷宫的数值猜测关键操作（我是菜狗没办法……猜！）</p><p>这里用数字写的flag不对，查了很多资料，了解了相关知识</p><h2 id="相关知识点"><a href="#相关知识点" class="headerlink" title="相关知识点"></a>相关知识点</h2><h3 id="键盘扫描码-键盘虚拟码-ASCII码"><a href="#键盘扫描码-键盘虚拟码-ASCII码" class="headerlink" title="键盘扫描码  键盘虚拟码  ASCII码"></a>键盘扫描码  键盘虚拟码  ASCII码</h3><p>​扫描码是键盘对应按键的编码，与硬件相关，不同厂商对同一个键的扫描码有可能不同。为了统一这种差异，计算机接受到的扫描码交给键盘驱动程序，将扫描码转化为虚拟码（同一个键的虚拟码相同）。而为了便于记忆，有部分键存储为对应ASCII码。（eg:字母存为大写字母的ASCII码）</p><p>​存储方式：键盘上的每一个键都有两个唯一的数值进行标志，标志敲击与释放。  “普通键”的低8位数存放该字符的ASCII码。对于特殊键（ 特殊键包括箭头键、功能键等 ），低8位为0，高8位字节存放该键的扫描码。</p><h3 id="sys文件"><a href="#sys文件" class="headerlink" title=".sys文件"></a>.sys文件</h3><p>sys是Windows的系统文件，sys文件是驱动程序的可执行代码,其扩展名为.sys。（这个题就是的.sys文件就是系统驱动程序，接收的是键盘扫描码，所以对应的是I,K,J,L）</p><h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p>手动解迷宫：LKKKLLKLKKKLLLKKKLLLLLL</p><p>flag{403950a6f64f7fc4b655dea696997851}</p>]]></content>
      
      
      
        <tags>
            
            <tag> Re </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nmap参数</title>
      <link href="/2021/09/09/nmap%E5%8F%82%E6%95%B0/"/>
      <url>/2021/09/09/nmap%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="nmap参数"><a href="#nmap参数" class="headerlink" title="nmap参数"></a>nmap参数</h1><p>当Nmap不带选项运行时，该选项概要会被输出，最新的版本在这里<a href="http://www.insecure.org/nmap/data/nmap.usage.txt%E3%80%82%E5%AE%83%E6%9C%89%E5%8A%A9%E4%BA%8E%E4%BA%BA%E4%BB%AC%E8%AE%B0%E4%BD%8F%E6%9C%80%E5%B8%B8%E7%94%A8%E7%9A%84%E9%80%89%E9%A1%B9%EF%BC%8C%E4%BD%86%E4%B8%8D%E8%83%BD%E6%9B%BF%E4%BB%A3%E6%9C%AC%E6%89%8B%E5%86%8C%E5%85%B6%E4%BD%99%E6%B7%B1%E5%85%A5%E7%9A%84%E6%96%87%E6%A1%A3%E3%80%82">http://www.insecure.org/nmap/data/nmap.usage.txt。它有助于人们记住最常用的选项，但不能替代本手册其余深入的文档。</a></p><ul><li><strong>用法</strong></li></ul><p>　　<strong>用法：nmap [扫描类型] [选项] {目标规范}</strong></p><ol><li><h4 id="目标规格：可以传递主机名，IP地址，网络等。"><a href="#目标规格：可以传递主机名，IP地址，网络等。" class="headerlink" title="目标规格：可以传递主机名，IP地址，网络等。"></a>目标规格：可以传递主机名，IP地址，网络等。</h4><p>-iL &lt;输入文件名&gt;：从主机&#x2F;网络列表中输入<br>-iR &lt;num主机&gt;：选择随机目标<br>–exclude &lt;host1 [，host2] [，host3]，…&gt;：排除主机&#x2F;网络<br>–excludefile <exclude_file>：从文件中排除列表</exclude_file></p></li><li><h4 id="主机发现："><a href="#主机发现：" class="headerlink" title="主机发现："></a>主机发现：</h4><p>-sL：列表扫描-仅列出要扫描的目标<br>-sP：Ping扫描-只能确定主机是否在线<br>-P0：将所有主机视为在线-跳过主机发现<br>-PS &#x2F; PA &#x2F; PU [端口列表]：对给定端口的TCP SYN &#x2F; ACK或UDP发现探针-PE &#x2F; PP &#x2F; PM：ICMP回显，时间戳和网络掩码请求发现探针<br>-n &#x2F; -R：从不进行DNS解析&#x2F;始终解决</p></li><li><h4 id="扫描技术："><a href="#扫描技术：" class="headerlink" title="扫描技术："></a>扫描技术：</h4><p>-sS &#x2F; sT &#x2F; sA &#x2F; sW &#x2F; sM：TCP SYN &#x2F; Connect()&#x2F; ACK &#x2F; Window &#x2F; Maimon扫描<br>-sN &#x2F; sF &#x2F; sX：TCP Null，FIN和Xmas扫描<br>–scanflags &lt;标志&gt;：自定义TCP扫描标志<br>-sI &lt;僵尸主机[：probeport]&gt;：Idlescan<br>-sO：IP协议扫描<br>-b &lt;ftp中继主机&gt;：FTP退回扫描<br>端口规格和扫描顺序：-p &lt;端口范围&gt;：仅扫描指定的端口，例如：-p22; -p1-65535; -p U：53,111,137，T：21-25,80,139,8080<br>-F：快速-仅扫描nmap-services文件中列出的端口）<br>-r：连续扫描端口-不要随机化</p></li><li><h4 id="OS检测："><a href="#OS检测：" class="headerlink" title="OS检测："></a>OS检测：</h4><p>-O：启用OS检测<br>–osscan-limit：将OS检测限制在有希望的目标上<br>–osscan-guess：猜测OS</p></li><li><h4 id="T-0-6-：设置定时模板（越高越快）"><a href="#T-0-6-：设置定时模板（越高越快）" class="headerlink" title="-T [0-6]：设置定时模板（越高越快）"></a>-T [0-6]：设置定时模板（越高越快）</h4><p>–min-hostgroup &#x2F; max-hostgroup <msec>：并行主机扫描组大小<br>–min-parallelism &#x2F; max-parallelism <msec>：探针并行化<br>–min-rtt-timeout &#x2F; max-rtt-timeout &#x2F; initial-rtt -timeout <msec>：指定</msec></msec></msec></p></li><li><h4 id="服务-x2F-版本检测："><a href="#服务-x2F-版本检测：" class="headerlink" title="服务&#x2F;版本检测："></a>服务&#x2F;版本检测：</h4><p>-sV：探测打开的端口以确定服务&#x2F;版本信息<br>–version-light ：仅限于可能的探针以进行更快的识别<br>–version-all：尝试对每个探针进行版本检测<br>–version-trace：显示详细的版本扫描活动（用于调试）</p></li><li><h4 id="MISC的XSL样式表："><a href="#MISC的XSL样式表：" class="headerlink" title="MISC的XSL样式表："></a>MISC的XSL样式表：</h4><p>-6：启用IPv6扫描<br>-A：启用OS检测和版本检测<br>–datadir <dirname>：指定自定义Nmap数据文件位置<br>–send-eth &#x2F;-send-ip：使用原始以太网帧或IP数据包发送数据包<br>–privileged：假定用户具有完全特权<br>-V：打印版本号<br>-h：打印此帮助摘要页面。<br>   例子：<br>   nmap -v -A scanme.nmap.org<br>   nmap -v -sP 192.168.0.0&#x2F;16 10.0.0.0&#x2F;8<br>   nmap -v -iR 10000 -P0 -p 80</dirname></p></li><li><h4 id="探针往返时间"><a href="#探针往返时间" class="headerlink" title="探针往返时间"></a>探针往返时间</h4><p>–host-timeout <msec>：经过很长的时间后放弃目标<br>–scan-delay &#x2F;-max-scan-delay <msec>：调整两次探查之间的延迟防火墙&#x2F; ID闪避和溢出<br>-f; –mtu <val>：分片数据包（可选的&#x2F;具有给定的MTU）<br>-D &lt;decoy1，decoy2 [，ME]，…&gt;：用诱饵掩盖扫描<br>-S <IP_Address>：欺骗源地址<br>-e <iface>：使用指定的接口<br>-g &#x2F;-source-port &lt;端口号&gt;：<br>–data-length <num>：将随机数据附加到发送的数据包中<br>–ttl <val>：设置IP生存时间字段<br>–spoof-mac &lt;mac地址，前缀或供应商名称&gt;：欺骗您的MAC地址</val></num></iface></IP_Address></val></msec></msec></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>z3约束器</title>
      <link href="/2021/09/09/z3%E7%BA%A6%E6%9D%9F%E5%99%A8/"/>
      <url>/2021/09/09/z3%E7%BA%A6%E6%9D%9F%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="z3约束器"><a href="#z3约束器" class="headerlink" title="z3约束器"></a>z3约束器</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install z3-solver</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="申请变量"><a href="#申请变量" class="headerlink" title="申请变量"></a>申请变量</h3><p>#&lt;数据类型&gt;(‘对象名’)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x = Inx(<span class="string">&#x27;x&#x27;</span>)<span class="comment">#申请整型变量x</span></span><br><span class="line">x,y,z = BitVecs(<span class="string">&#x27;x y z&#x27;</span>,<span class="number">16</span>)<span class="comment">#申请3个位向量，大小为2^16,加&#x27;s&#x27;批量声明</span></span><br><span class="line"></span><br><span class="line">Int()<span class="comment">#整数</span></span><br><span class="line">Real()<span class="comment">#实数</span></span><br><span class="line">Bool()<span class="comment">#布尔型</span></span><br><span class="line"><span class="comment">#更改返回类型</span></span><br><span class="line">IntVal()</span><br><span class="line">Realval()</span><br><span class="line">Ratval()||Q()<span class="comment">#有理数</span></span><br></pre></td></tr></table></figure><h3 id="求解"><a href="#求解" class="headerlink" title="求解"></a>求解</h3><p>#默认只会找到满足条件的一组解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">solve = Solver()<span class="comment">#创建解对象</span></span><br><span class="line">solve.add()<span class="comment">#添加约束条件</span></span><br><span class="line">solve.check()<span class="comment">#求解</span></span><br><span class="line">solve.model()<span class="comment">#输出解，list类型，对象名为下标</span></span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="simplify"><a href="#simplify" class="headerlink" title="simplify()"></a>simplify()</h4><p>#将表达式化简</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">simplify(&lt;表达式&gt;，som=Ture || mul_to_power=<span class="literal">True</span>)<span class="comment">#som表达式转换为单项式，mul_to_power乘方形式</span></span><br><span class="line">help_simplify()<span class="comment">#其他选项</span></span><br></pre></td></tr></table></figure><h4 id="set-param"><a href="#set-param" class="headerlink" title="set_param()"></a>set_param()</h4><p>#配置全局变量格式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set_param(precision=30)  #保留30位的小数</span><br><span class="line">set_param(rational_to_decimal=True) # 以十进制形式表示有理数</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> re笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow 数学不及格</title>
      <link href="/2021/09/08/ctfshow-%E6%95%B0%E5%AD%A6%E4%B8%8D%E5%8F%8A%E6%A0%BC/"/>
      <url>/2021/09/08/ctfshow-%E6%95%B0%E5%AD%A6%E4%B8%8D%E5%8F%8A%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<h1 id="ctfshow-数学不及格"><a href="#ctfshow-数学不及格" class="headerlink" title="ctfshow 数学不及格"></a>ctfshow 数学不及格</h1><p>无壳，64位</p><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><p>strtol()16进制转字符串斐波拉契数列z3约束器（可以不用）</p><h3 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h3><p>#主函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> v4; <span class="comment">// [rsp+14h] [rbp-4Ch]</span></span><br><span class="line">  <span class="keyword">char</span> *endptr; <span class="comment">// [rsp+18h] [rbp-48h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> *v6; <span class="comment">// [rsp+20h] [rbp-40h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> *v7; <span class="comment">// [rsp+28h] [rbp-38h] BYREF</span></span><br><span class="line">  <span class="keyword">char</span> *v8; <span class="comment">// [rsp+30h] [rbp-30h] BYREF</span></span><br><span class="line">  __int64 v9; <span class="comment">// [rsp+38h] [rbp-28h]</span></span><br><span class="line">  __int64 v10; <span class="comment">// [rsp+40h] [rbp-20h]</span></span><br><span class="line">  __int64 v11; <span class="comment">// [rsp+48h] [rbp-18h]</span></span><br><span class="line">  __int64 v12; <span class="comment">// [rsp+50h] [rbp-10h]</span></span><br><span class="line">  <span class="keyword">unsigned</span> __int64 v13; <span class="comment">// [rsp+58h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v13 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="keyword">if</span> ( argc != <span class="number">5</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;argc nonono&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  v4 = strtol(argv[<span class="number">4</span>], &amp;endptr, <span class="number">16</span>) - <span class="number">25923</span>;    <span class="comment">// agrv 转化为long int[0-9,a-f]</span></span><br><span class="line">  v9 = f(v4);</span><br><span class="line">  v10 = strtol(argv[<span class="number">1</span>], &amp;v6, <span class="number">16</span>);</span><br><span class="line">  v11 = strtol(argv[<span class="number">2</span>], &amp;v7, <span class="number">16</span>);</span><br><span class="line">  v12 = strtol(argv[<span class="number">3</span>], &amp;v8, <span class="number">16</span>);</span><br><span class="line">  <span class="keyword">if</span> ( v9 - v10 != <span class="number">151381742876LL</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;argv1 nonono!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v9 - v11 != <span class="number">117138004530LL</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;argv2 nonono!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v9 - v12 != <span class="number">155894355749LL</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;argv3 nonono!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> ( v4 + v12 + v11 + v10 != <span class="number">1349446086540LL</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;argv sum nonono!&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">puts</span>(<span class="string">&quot;well done!decode your argv!&quot;</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>f()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 __fastcall <span class="title">f</span><span class="params">(<span class="keyword">int</span> a1)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i; <span class="comment">// [rsp+1Ch] [rbp-14h]</span></span><br><span class="line">  __int64 v3; <span class="comment">// [rsp+20h] [rbp-10h]</span></span><br><span class="line">  _QWORD *ptr; <span class="comment">// [rsp+28h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> ( a1 &lt;= <span class="number">1</span> || a1 &gt; <span class="number">200</span> )</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">  ptr = <span class="built_in">malloc</span>(<span class="number">8LL</span> * a1);</span><br><span class="line">  *ptr = <span class="number">1LL</span>;                                   <span class="comment">// 前两位为1</span></span><br><span class="line">  ptr[<span class="number">1</span>] = <span class="number">1LL</span>;</span><br><span class="line">  v3 = <span class="number">0LL</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">2</span>; i &lt; a1; ++i )                    <span class="comment">// 斐波拉契数列</span></span><br><span class="line">  &#123;</span><br><span class="line">    ptr[i] = ptr[i - <span class="number">1</span>] + ptr[i - <span class="number">2</span>];</span><br><span class="line">    v3 = ptr[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">free</span>(ptr);</span><br><span class="line">  <span class="keyword">return</span> v3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>四个判断等式联立求解，划掉v10-v12，得v4+3*v9;又因为v9为v4下标范围内的斐波拉契数列值，因此通过0&lt;v4&lt;200,有爆破可能性，直接遍历爆破v4与v9。（v4&#x3D;58,v9&#x3D;591286729879）</p><p>后面依次求解v10-v12，并把它们转化为字符串。</p><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">feb</span>(<span class="params">n</span>):</span></span><br><span class="line">    li=[]</span><br><span class="line">    v9=<span class="number">0</span></span><br><span class="line">    li.append(<span class="number">1</span>)</span><br><span class="line">    li.append(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,n):</span><br><span class="line">        li.append(li[i-<span class="number">1</span>] + li[i-<span class="number">2</span>])</span><br><span class="line">        v9=li[i]</span><br><span class="line">    <span class="comment"># print(v9)</span></span><br><span class="line">    <span class="keyword">return</span> v9</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">199</span>):</span><br><span class="line">    v4=i;</span><br><span class="line">    v9=feb(v4)</span><br><span class="line">    <span class="comment"># print(v4,v4+3*v9)</span></span><br><span class="line">    <span class="keyword">if</span>(v4+<span class="number">3</span>*v9==<span class="number">151381742876</span>+<span class="number">117138004530</span>+<span class="number">155894355749</span>+<span class="number">1349446086540</span>):</span><br><span class="line">        <span class="built_in">print</span>(v4,v9)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">v10 = <span class="built_in">hex</span>(<span class="number">151381742876</span>-v9)</span><br><span class="line">v11 = <span class="built_in">hex</span>(<span class="number">117138004530</span>-v9)</span><br><span class="line">v12 = <span class="built_in">hex</span>(<span class="number">155894355749</span>-v9)</span><br><span class="line"></span><br><span class="line">s=<span class="string">&#x27;666c61677b6e65776265655f686572657d&#x27;</span></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(s),<span class="number">2</span>):</span><br><span class="line">flag+=<span class="built_in">chr</span>(<span class="built_in">int</span>(s[i:i+<span class="number">2</span>],<span class="number">16</span>))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># flag&#123;newbee_here&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Re </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
